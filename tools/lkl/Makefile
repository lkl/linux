# Do not use make's built-in rules
# (this improves performance and avoids hard-to-debug behaviour);
# also do not print "Entering directory..." messages from make
.SUFFIXES:
MAKEFLAGS += -r --no-print-directory 

ifeq ($(V),1)
  Q =
else
  Q = @
endif

# default target
all:

-include ../scripts/Makefile.include

# By default we want to use gcc (as does Linux), especially as the clang
# cross toolchain does not use prefixed names
CC    := $(CROSS_COMPILE)gcc
LD    := $(CROSS_COMPILE)$(LD)
AR    := $(CROSS_COMPILE)$(AR)
export CC LD AR

EXESUF   := 
SOSUF    := .so

PREFIX   := /usr

ifeq (,$(srctree))
  srctree := $(patsubst %/,%,$(dir $(shell pwd)))
  srctree := $(patsubst %/,%,$(dir $(srctree)))
endif
export srctree

# we rely on the global Kconfig for the lkl host library
KCONFIG_CONFIG        ?= $(srctree)/.config
KCONFIG_AUTOHEADER    := $(srctree)/include/generated/autoconf.h
KCONFIG_AUTOCONFIG    := $(srctree)/include/config/auto.conf
export KCONFIG_AUTOCONFIG KCONFIG_AUTOHEADER

# Some targets do not require the config variables and would cause
# unneccessary re-configuration of the kernel tree
NON_CONFIG_TARGETS := clean config %config

ifneq (,$(filter-out $(NON_CONFIG_TARGETS),$(MAKECMDGOALS)))
  # include kernel config
  include $(KCONFIG_AUTOCONFIG)
else ifeq ($(MAKECMDGOALS),)
  # include kernel config
  include $(KCONFIG_AUTOCONFIG)
endif


# Target build configuration

export CFLAGS += -Iinclude -Wall -g -O2 -Wextra -Wno-unused-parameter \
	  -Wno-missing-field-initializers -fno-strict-aliasing

OUTPUT_FORMAT = $(shell $(LD) -r -print-output-format)

ifneq (,$(filter $(OUTPUT_FORMAT),elf64-x86-64 elf32-i386 elf64-x86-64-freebsd))
  CFLAGS   += -fPIC -pthread
  LDLIBS   += -lrt -lpthread
  export CONFIG_AUTO_LKL_POSIX_HOST=y
else ifneq (,$(filter $(OUTPUT_FORMAT),elf32-littlearm))
  CFLAGS   += -fPIC
  export CONFIG_AUTO_LKL_POSIX_HOST=y
else ifneq (,$(filter $(OUTPUT_FORMAT),pe-i386))
  KOPT      = "KALLSYMS_EXTRA_PASS=1"
  LDLIBS   += -lws2_32
  EXESUF   := .exe
  SOSUF    := .dll
  export CONFIG_AUTO_LKL_NT_HOST=y
else
  $(error Unrecognized platform: $(OUTPUT_FORMAT))
endif

ifeq (y,$(CONFIG_LKL_FUSE))
  ALL_PROGRAMS      += lklfuse$(EXESUF)
endif
ifeq (y,$(CONFIG_LKL_CPTOFS))
  ALL_PROGRAMS      += cptofs$(EXESUF) cpfromfs$(EXESUF)
endif
ifeq (y,$(CONFIG_LKL_FS2TAR))
  ALL_PROGRAMS      += fs2tar$(EXESUF)
endif

ifeq (y,$(CONFIG_LKL_STATIC))
  ALL_LIBRARIES     += liblkl.a
endif
ifeq (y,$(CONFIG_LKL_SHARED))
  ALL_LIBRARIES     += liblkl$(SOSUF)
endif
ifeq (y,$(CONFIG_LKL_HIJACK))
  ALL_LIBRARIES     += liblkl-hijack$(SOSUF)
endif

static: liblkl.a
shared: liblkl$(SOSUF)
hijack: liblkl-hijack$(SOSUF)

liblkl$(SOSUF): lib/lkl-in.o lib/lkl.o
liblkl$(SOSUF): LDFLAGS += -shared

liblkl-hijack$(SOSUF): lib/hijack/hijack-in.o liblkl.a
liblkl-hijack$(SOSUF): LDFLAGS += -shared -nodefaultlibs
liblkl-hijack$(SOSUF): LDLIBS += -ldl

lklfuse$(EXESUF): lklfuse-in.o liblkl.a
lklfuse$(EXESUF): LDLIBS += -lfuse

fs2tar$(EXESUF): fs2tar-in.o liblkl.a
fs2tar$(EXESUF): LDLIBS += -larchive
ifneq (,$(filter $(OUTPUT_FORMAT),elf64-x86-64-freebsd))
  fs2tar$(EXESUF): LDLIBS += -largp
endif

cptofs$(EXESUF): cptofs-in.o liblkl.a
ifneq (,$(filter $(OUTPUT_FORMAT),elf64-x86-64-freebsd))
  cptofs$(EXESUF): LDLIBS += -largp
endif


TEST_TARGETS        := test valgrind gdb

tests/boot: tests/boot-in.o liblkl.a
$(TEST_TARGETS): tests/boot

# because of libdl, liblkl-hijack will not compile on windows
# fortunately, the test target will handle a missing libhijack.so correctly
ifeq (,$(filter $(OUTPUT_FORMAT),pe-i386))
  test: liblkl-hijack$(SOSUF)
endif


# forward all config-related targets to the main Kernel makefile
$(KCONFIG_AUTOCONFIG) $(KCONFIG_AUTOHEADER): $(KCONFIG_CONFIG)
	$(Q)$(MAKE) -C $(srctree) ARCH=lkl include/config/auto.conf

$(KCONFIG_CONFIG): ;

config: FORCE
	$(Q)$(MAKE) -C $(srctree) ARCH=lkl $@

%config: FORCE
	$(Q)$(MAKE) -C $(srctree) ARCH=lkl $@

%-in.o: lib/lkl.o FORCE
	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(patsubst %/,%,$(dir $*)) obj=$(notdir $*)

lib/lkl.o: $(KCONFIG_AUTOCONFIG)
	$(Q)$(MAKE) -C ../.. ARCH=lkl $(KOPT) install INSTALL_PATH=$(CURDIR)

liblkl.a: lib/lkl-in.o lib/lkl.o
	$(QUIET_AR)$(AR) -rc $@ $^

liblkl$(SOSUF) liblkl-hijack$(SOSUF) lklfuse$(EXESUF) fs2tar$(EXESUF) cptofs$(EXESUF) tests/boot:
	$(QUIET_LINK)$(CC) $(LDFLAGS) -o $@ $^ $(LDLIBS)

cpfromfs$(EXESUF): cptofs$(EXESUF)
	$(Q)if ! [ -e $@ ]; then ln -s $< $@; fi

# because of argp and fuse, none of the binaries will compile on windows
# because of libdl, liblkl-hijack will not compile on windows
ifneq (,$(filter $(OUTPUT_FORMAT),pe-i386))
  all: $(filter-out liblkl-hijack$(SOSUF), $(ALL_LIBRARIES))
else
  all: $(ALL_PROGRAMS) $(ALL_LIBRARIES)
endif

clean:
	$(call QUIET_CLEAN, objects)find . -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete
	$(call QUIET_CLEAN, headers)$(RM) -r include/lkl/
	$(call QUIET_CLEAN, "host libraries")$(RM) liblkl.a liblkl$(SOSUF)
	$(call QUIET_CLEAN, "hijack library")$(RM) liblkl-hijack$(SOSUF)
	$(call QUIET_CLEAN, programs)$(RM) lklfuse$(EXESUF) fs2tar$(EXESUF) cptofs$(EXESUF) cpfromfs$(EXESUF)
	$(call QUIET_CLEAN, tests)$(RM) tests/boot

$(TEST_TARGETS):
	$(MAKE) -C tests $@


headers_install:
	$(call QUIET_INSTALL, headers) \
	    install -d $(DESTDIR)$(PREFIX)/include ; \
	    install -m 644 include/lkl.h include/lkl_host.h $(DESTDIR)$(PREFIX)/include ; \
	    cp -r include/lkl $(DESTDIR)$(PREFIX)/include

libraries_install: $(ALL_LIBRARIES)
	$(call QUIET_INSTALL, libraries) \
	    install -d $(DESTDIR)$(PREFIX)/lib ; \
	    install -m 644 $(ALL_LIBRARIES) $(DESTDIR)$(PREFIX)/lib

programs_install: $(ALL_PROGRAMS)
	$(call QUIET_INSTALL, programs) \
	    install -d $(DESTDIR)$(PREFIX)/bin ; \
	    install -m 755 $(ALL_PROGRAMS) $(DESTDIR)$(PREFIX)/bin

install: headers_install libraries_install programs_install


FORCE: ;
.PHONY: all clean $(TEST_TARGETS) FORCE
.PHONY: headers_install libraries_install programs_install install
